name: Get latest tag

on:
  workflow_dispatch:
    inputs:
        environment:
          description: Select an environment
          type: choice
          required: true
          default: ""
          options:
            - prod
            - qa
            - staging

jobs:

    env_check:
        runs-on: ubuntu-latest
        steps:
          - name: Environment check on branch
            id: env_setup
            run: |
              echo "Running on branch ${{ github.ref }}"
              
              if [ "${{ inputs.environment }}" = "prod" ]; then
                echo "env_name=prod" >> $GITHUB_OUTPUT
                echo "ENVNAME=prod" >> $GITHUB_ENV
                echo "deploy_branch=main" >> $GITHUB_OUTPUT
              elif [ "${{ inputs.environment }}" = "staging" ]; then
                echo "env_name=staging" >> $GITHUB_OUTPUT
                echo "ENVNAME=staging" >> $GITHUB_ENV
                echo "deploy_branch=release" >> $GITHUB_OUTPUT
              elif [ "${{ inputs.environment }}" = "qa" ]; then
                echo "env_name=qa" >> $GITHUB_OUTPUT
                echo "ENVNAME=qa" >> $GITHUB_ENV
                echo "deploy_branch=develop" >> $GITHUB_OUTPUT
              else
                echo "env_name=undefined" >> $GITHUB_OUTPUT
                echo "ENVNAME=undefined" >> $GITHUB_ENV
                echo "deploy_branch=undefined" >> $GITHUB_OUTPUT
              fi                  
          - name: Use environment setup in previous step
            run: echo "Setting up environment ${{ steps.env_setup.outputs.env_name }}"
    
        outputs:
          env_name: ${{ steps.env_setup.outputs.env_name }}


    deployment_check:
      name: Deployment check
      runs-on: ubuntu-latest
      needs: env_check
      steps:

        - uses: actions/checkout@v4
        - name: Get latest tag
          uses: rmeneely/git-last-tag@v1
          with:
            tag_pattern: '${{ needs.env_check.outputs.env_name }}-v[0-9]*.[0-9]*.[0-9]*'
        
        - name: Set latest tag output
          id: tag_output
          run: |
            echo ${{ env.LAST_TAG }}
            echo "latest_tag=${{ env.LAST_TAG }}" >> $GITHUB_OUTPUT

        - name: Main branch deployment
          if: ${{ startsWith(github.ref, 'refs/heads/main') }}
          shell: bash
          run: |
            set -e
            echo "Deployment from ${{ github.ref }} to env ${{ needs.env_check.outputs.env_name }}"
  
            if [ ${{ needs.env_check.outputs.env_name }} = 'prod' ]
            then
              echo "OK: Running on Prod from main branch"
              echo "DEPLOYMENT_REF=${{ env.LAST_TAG }}" >> $GITHUB_ENV
            else
              echo "Error: This deployment is supported only on Prod."
              exit 1
            fi
  
        - name: Staging tags deployment
          if: ${{ startsWith(github.ref, 'refs/tags/staging') }}
          shell: bash
          run: |
            set -e
            echo "Deployment from ${{ github.ref }} to env ${{ needs.env_check.outputs.env_name }}"
  
            if [ ${{ needs.env_check.outputs.env_name }} = 'staging' ]
            then
              echo "OK: Running on Staging from demo"
              echo "DEPLOYMENT_REF=${{ github.ref_name }}" >> $GITHUB_ENV
            else
              echo "Error: This deployment is supported only on Staging."
              exit 1
            fi
                
        - name: QA tags deployment
          if: ${{ startsWith(github.ref, 'refs/tags/qa') }}
          shell: bash
          run: |
            set -e
            echo "Deployment from ${{ github.ref }} to env ${{ needs.env_check.outputs.env_name }}"
  
            if [ ${{ needs.env_check.outputs.env_name }} = 'qa' ]
            then
              echo "OK: Running on QA tags from demo"
              echo "DEPLOYMENT_REF=${{ github.ref_name }}" >> $GITHUB_ENV
            else
              echo "Error: This deployment is supported only on QA."
              exit 1
            fi
  
        - name: Set deployment ref
          id: deployment_ref
          shell: bash
          run: |
            echo "deployment_ref=${{ env.DEPLOYMENT_REF }}" >> $GITHUB_OUTPUT
        
      outputs:
        deployment_ref: ${{ steps.deployment_ref.outputs.deployment_ref }}

    deployment:
      name: Deployment
      runs-on: ubuntu-latest
      needs: [env_check,deployment_check]
      steps:
        - name: Print deployment ref
          shell: bash
          run: | 
            echo "${{ needs.deployment_check.outputs.deployment_ref }}"